name: Generate default Caddy Scheme
on:
  push:
    tags:
      - v*

jobs:
  generate-schema:
    name: Build customized Caddy
    runs-on: ubuntu-latest
    steps:
      - name: Generate latest scheme
        run: |
          echo `go version`
          wget "https://github.com/caddyserver/xcaddy/releases/latest/download/xcaddy_0.3.5_linux_amd64.tar.gz" -O xcaddy_latest.tar.gz
          tar -xzvf xcaddy_latest.tar.gz
          ./xcaddy build v2.7.3 --with github.com/abiosoft/caddy-json-schema --with github.com/mholt/caddy-l4 --with github.com/caddy-dns/cloudflare --with github.com/mholt/caddy-webdav=github.com/iamspark1e/caddy-webdav@v0.0.1 --with github.com/caddyserver/forwardproxy@caddy2=github.com/klzgrad/forwardproxy@naive
          ./caddy json-schema --vscode
      - name: Archive config json
        uses: actions/upload-artifact@v3
        with:
          name: caddy-schema
          path: .vscode/caddy_schema.json
  dockerize:
    name: Build docker containers
    runs-on: ubuntu-latest
    needs: generate-schema
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download latest schema
        uses: actions/download-artifact@v3
        with:
          name: caddy-schema
          path: public/caddy_schema.json
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container image
        uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
  # releases-matrix:
  #   name: Release Go Binary
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
  #       goos: [linux, windows, darwin]
  #       goarch: ["386", amd64, arm64]
  #       exclude:
  #         - goarch: "386"
  #           goos: darwin
  #         - goarch: arm64
  #           goos: windows
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: wangyoucao577/go-release-action@v1
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         goos: ${{ matrix.goos }}
  #         goarch: ${{ matrix.goarch }}